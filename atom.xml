<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ArisuMika&#39;Blog</title>
  
  <subtitle>热爱与创作</subtitle>
  <link href="http://blog.arisumika.top/atom.xml" rel="self"/>
  
  <link href="http://blog.arisumika.top/"/>
  <updated>2025-05-22T15:40:10.185Z</updated>
  <id>http://blog.arisumika.top/</id>
  
  <author>
    <name>ArisuMika</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>就业方向的修正与再思考以及个人近况</title>
    <link href="http://blog.arisumika.top/posts/7.html"/>
    <id>http://blog.arisumika.top/posts/7.html</id>
    <published>2025-05-22T14:40:00.000Z</published>
    <updated>2025-05-22T15:40:10.185Z</updated>
    
    <content type="html"><![CDATA[<div class="tip info"><p>本篇更多是个人的碎碎念，对于本人的未来思考</p></div><h1 id="原本的方向想法">原本的方向想法</h1><h2 id="与计算机图形学的缘">与计算机图形学的缘</h2><p>一开始先接触到的是渲染这一块，本人平常也有玩Blender的经验，再加上许多游戏的经验。<br>我发现我会特别在意游戏里面的渲染，光影，纹理这一块内容，在此产生了些许兴趣。<br>再之后就知道了技术美术和图形工程师这两个职位。<br>在此之前本人大一上学的都是全栈方向，以前端为主。<br>大一下中期发现了计算机图形学之后决定光速转行，然后就有了你们所看到的我在学习计算机图形学的过程笔记。</p><h2 id="与技术美术的思">与技术美术的思</h2><p>经过技术美术和图形工程师这两个岗位的查询，对比和询问之后，发现其实技术美术更佳符合我的兴趣方向。<br>同时也注意到了许多问题：</p><ul><li>岗位少，基本都是中大厂在招</li><li>学的方向多，技术和美术双向发展(但其实还好，本人本身就是艺术转文化，说到底还有一些底子)</li><li>工作也不好拿，竞争大</li><li>技美也分很多方向</li><li>。。。<br>同时我还是双非，也不能说有多大优势，但是能进我还是想试试的。</li></ul><h1 id="修正与再思考">修正与再思考</h1><h2 id="与技术美术的思考">与技术美术的思考</h2><p>最近也是加上了不少业内人和路上的学长，都在劝我远离计算机图形学，就算要走也不要走渲染向技术美术。<br>这不禁让我重新思考起了方向，但是确实，我对于渲染的兴趣明显更大于其他方向，这不得不使我做出新的抉择。<br>继续走渲染向？还是另辟蹊径，改走其他方向？<br>说到底，我到现在还没有做出一个明确的决定。<br>只有一个是确认的，我要走的是游戏行业，最好带些美术成分的。<br>技术美术的方向有很多，渲染，粒子，工具，动画等等。<br>但是偏偏渲染向说人很多，这让我很郁闷。<br>我究竟要靠长时间的学习和实力脱颖而出？<br>还是在另一个相对不那么拥挤的赛道走出自己的路，因为非渲染向的学习资料是相对更少的，更多的还是需要自己去研究学习。</p><h2 id="眼光重回游戏客户端开发">眼光重回游戏客户端开发</h2><p>也有不少人说客户端开发是一个更好的选择，起码比技美更好一些。<br>更多的是考察基础，cpp和引擎的掌握程度，当然，大厂更看重基础的扎实程度以及个人可塑性。<br>这也是一条道路，客户端转技美也算是可以？</p><h2 id="修正">修正</h2><p>起码现在，我打算先把计算机基础学好，打一个扎实的cpp基础，抓算法，抓项目，抓能力塑造<br>以及时刻观察市面游戏行业的发展，对于岗位的需求，要求。<br>对着岗位要求进行学习是一个更简单明确的方法和方向。<br>很难说我现在对于渲染技术美术包有多大的信心，但是不管怎么说，试试看？<br>凭借基础留一条客户端的路也不是不行。</p><h1 id="个人近况">个人近况</h1><h2 id="为什么不更新了？学这么慢吗？">为什么不更新了？学这么慢吗？</h2><p>因为最近的事情有点多，主要是我一直在规划我一整个的计划，<br>我现在不确定把这部分学完要什么时候了，但是可以说的是，7月前大概会结束。</p><p>还有是临近期末周，本人平常是不上课不听课的，一般都是学自己的，所以所有科目都没有学，<br>为了避免挂科，需要抽出很多期末冲刺时间。</p><p>然后也正研究其他的东西，特别是Gal网站（可以去友链看看）做完之后，需要考虑很多的运营维护问题，为了维持网站的运行。我花了很多时间，想了很多的方案，目前是最优解，但是具体实施还是需要时间。</p><h2 id="心态">心态</h2><p>这暑假是本人的大一向大二的转变，说实话，给我的时间并不是很充足，我必须尽快决定我的方向，然后迅速进行学习线的规划与完成。<br>这么说可能会有人觉得我太急了，但是我确实很急，并不是说单纯想卷，只是我真的很想得到这份工作。</p><p><strong>这次的碎碎念就到这里吧，时间可贵，把快乐放在自己身上</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;本篇更多是个人的碎碎念，对于本人的未来思考&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;原本的方向想法&quot;&gt;原本的方向想法&lt;/h1&gt;
&lt;h2 id=&quot;与计算机图形学的缘&quot;&gt;与计算机图形学的缘&lt;/h2&gt;
&lt;p&gt;一开始先接触到的是渲染这一块，</summary>
      
    
    
    
    <category term="Arisuの棉花糖" scheme="http://blog.arisumika.top/categories/Arisu%E3%81%AE%E6%A3%89%E8%8A%B1%E7%B3%96/"/>
    
    
    <category term="个人日常" scheme="http://blog.arisumika.top/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%B8%B8/"/>
    
    <category term="就业方向" scheme="http://blog.arisumika.top/tags/%E5%B0%B1%E4%B8%9A%E6%96%B9%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>光栅化（三角形的离散化）</title>
    <link href="http://blog.arisumika.top/posts/6.html"/>
    <id>http://blog.arisumika.top/posts/6.html</id>
    <published>2025-04-20T09:50:00.000Z</published>
    <updated>2025-05-07T15:34:42.918Z</updated>
    
    <content type="html"><![CDATA[<div class="tip info"><p>在之前的视图变换之后就要进行光栅化</p></div><h1 id="视锥">视锥</h1><h2 id="视锥定义">视锥定义</h2><p>从摄像机出发，看到的第一个平面是近平面，那么我们要给近平面定义一个宽高度，就类似于显示器一样的宽高比。<br>也就是可以看到的角度范围：fov，一般分为fovY和fovX。<br>foxY就是垂直可视角度；fovX也就是水平可视角度。<br>一般定义宽高比和fovY，直接就可以推出fovX。<br>具体可以看下图：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6vwjvw848jzpDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><h2 id="视锥计算">视锥计算</h2><p>确定fovY之后，就可以知道上面角度就是fovY/2，假定近平面上中点坐标是（0，t，n）.<br>就可以列出等式：$\frac{fovY}{2} = \frac{t}{|n|}$<br>宽高比：aspect = $\frac{r}{t}$</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7lr89js1ui25DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>这些概念都可以相互转换</p><h1 id="光栅化（三角形的离散化）">光栅化（三角形的离散化）</h1><h2 id="做完MVP（模型、视图、投影变换）">做完MVP（模型、视图、投影变换）</h2><p>参考本篇文章：<a href="https://blog.arisumika.top/posts/5.html">变换（模型、视图、投影）</a><br>做完上述变换之后，所有的物体都会停留在 $[-1,1]^3$ 的立方体里面。<br>那么这个一个正方体应该画在哪里呢？那肯定是在屏幕上。</p><h2 id="显示在屏幕上">显示在屏幕上</h2><h3 id="基本概念">基本概念</h3><h4 id="什么是屏幕？">什么是屏幕？</h4><ul><li>屏幕由一组像素组成</li><li>分辨率：像素组的数量密度</li><li>屏幕是典型的光栅成像设备</li></ul><h4 id="Raster-光栅化">Raster&quot;光栅化&quot;</h4><ul><li>Ratherize == 画到屏幕上</li></ul><h4 id="像素">像素</h4><p>一个像素显示一种颜色；像素颜色由RGB（red,green,blue）混合组成。</p><h3 id="定义屏幕空间">定义屏幕空间</h3><p>定义一个平面直角坐标系，每个像素都可以用坐标来表示，写成（x,y）形式。<br>例如下图的蓝色像素可以用（2，1）来表示<br>从零开始，像素的坐标范围就是（0，0）到（width-1，height-1）<br>像素的的中心就是（x+0.5,y+0.5）<br>屏幕的覆盖范围则是（0，0）到（width，height）</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6vwrhn84gi6xDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><h3 id="映射到屏幕空间">映射到屏幕空间</h3><p>相机朝向在z上，我们先不管<br>那么就很简单了，在x，y上变换：<br>将xy：$[1,1]^2$ 变换到 [0,width] * [0,height]</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fd4zll4si20jxDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>那么就可以得到<strong>视口变换</strong>：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6vws4i84hujbDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><h3 id="基础图形（三角形）">基础图形（三角形）</h3><p>在计算机图形中，最基本的图形就是三角形，得到非常广泛的运用。</p><ul><li>三角形是最基础的多边形。</li><li>任何的多边形都可以拆解成三角形。</li><li>三个点连成三角形，那一定是一个平面。</li><li>三角形的内部是一个平面。</li><li>三角形的内外部定义非常清楚，通过向量叉积就可以了。</li><li>只要定义三个顶点，就可以推算出三角形内的任何一个点。</li></ul><h3 id="最简单的光栅化（采样）">最简单的光栅化（采样）</h3><p>采样：就是把一个函数离散化的过程。<br>光栅化采样：利用像素的中心，对屏幕空间进行采样。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0m000d7w32xp533k07p5o5eDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>假如我们需要对上面的三角形进行采样，光栅化显示在屏幕上。<br>定义一个函数：inside（tri，x，y），判断像素点是否在三角形内，<br>在三角形内就是1，不在就是0.<br>跟据1和0的判断，就可以进行采样离散化。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7lrppgs2rnh7DIYPAdexAqevAGx1Aqav.png height=400px"/></div></div><p><strong>采样函数belike：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; xmax; x++)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; ymax; y++)</span><br><span class="line">     &#123;</span><br><span class="line">          image[x][y] = <span class="built_in">inside</span>(tri,x + <span class="number">0.5</span>,y + <span class="number">0.5</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么inside的函数具体是怎么实现的呢？<br>其实之前学向量的叉积的时候就提到过了。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0m000d7w32xp534iu7p7146DIYPAdexAqevAGx1Aqav.png height=400px"/></div></div><p>具体计算过程参考这篇文章：<a href="https://blog.arisumika.top/posts/3.html">线性代数：向量与基础矩阵</a></p><h3 id="光栅采样中的争议问题">光栅采样中的争议问题</h3><p>像下面的这幅图，中间的点到底是在三角形1 还是 2 还是 都在 还是 都不在。<br><strong>这些! 全部自己决定！</strong></p><ul><li><strong>注意</strong>：在一些图形学的API上，比如OpenGl或者Direct X，有非常严格的规定，点在上左则算在内，下右不算。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fd50q4bsiwlu4DIYPAdexAqevAGx1Aqav.png height=400px"/></div></div><h3 id="最简单的加速优化？">最简单的加速优化？</h3><p><strong>一优化：</strong><br>我们得到采样之后的数据之后，是否有必要遍历全部像素点？<br>只需要如下图的选择xmax和ymax的矩形（蓝色区域）中遍历就可以了。也就是使用包围盒，Bounding Box。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7lrrbas2ulptDIYPAdexAqevAGx1Aqav.png height=400px"/></div></div><p><strong>二优化：</strong><br>去选择每一行的xmin和xmax，然后直接在这区间内给像素着色就可以了。<br>每一行都记录这xmin和xmax，保证遍历的像素点最少。<br>但是并不好实现，一般在bounding box非常大的情况下使用。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0n000d7w32y5dw30anbmztjDIYPAdexAqevAGx1Aqav.png height=400px"/></div></div><h3 id="锯齿">锯齿</h3><p>经过以上步骤，恭喜你！完成了光栅化的基础采样，并显示在了屏幕之上，但是结果是下图的样子。<br>我们想要的明明是一个平整的三角形，这是为什么呢？<br>锯齿产生了！光栅化图形学一直在致力于解决的严重问题。<br>锯齿产生的原因，像素本身自己有一定的大小，采样率对于信号也不够高，产生了走样的结果。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzssw8anrq9p3DIYPAdexAqevAGx1Aqav.png height=400px"/></div></div><h2 id="之后">之后</h2><p>接下来要解决 <strong>抗锯齿</strong> 或者是 <strong>反走样</strong>！！！</p><p class='p center logo huge'>ArisuMika</p><p class='p center small cyan'>关注Arisu喵！关注Arisu谢谢喵！</p><div class="tag link"><a class="link-card" title="ArisuMikaのB站" href="https://space.bilibili.com/355273977"><div class="left"><img src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaeu4l5tf9wwDIYPAdexAqevAGx1Aqav.JPG"/></div><div class="right"><p class="text">ArisuMikaのB站</p><p class="url">https://space.bilibili.com/355273977</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;在之前的视图变换之后就要进行光栅化&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;视锥&quot;&gt;视锥&lt;/h1&gt;
&lt;h2 id=&quot;视锥定义&quot;&gt;视锥定义&lt;/h2&gt;
&lt;p&gt;从摄像机出发，看到的第一个平面是近平面，那么我们要给近平面定义一个宽高度，就类</summary>
      
    
    
    
    <category term="Arisuの巧克力" scheme="http://blog.arisumika.top/categories/Arisu%E3%81%AE%E5%B7%A7%E5%85%8B%E5%8A%9B/"/>
    
    
    <category term="线性代数" scheme="http://blog.arisumika.top/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="计算机图形" scheme="http://blog.arisumika.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>变换（模型、视图、投影）</title>
    <link href="http://blog.arisumika.top/posts/5.html"/>
    <id>http://blog.arisumika.top/posts/5.html</id>
    <published>2025-04-01T07:36:00.000Z</published>
    <updated>2025-04-14T14:29:13.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="补充知识">补充知识</h1><p>众所周知（）： $R_{\theta} = \begin{bmatrix} cos\theta , -sin\theta \ sin\theta , cos\theta \end{bmatrix}$<br>那问题来了，那我问你，那我问你！如果我要<strong>反着转</strong>呢？<strong>顺时针旋转</strong> $\theta$ 角，怎么表示？<br><strong>嗯？回答我！！</strong><br>那是不是可以表示为 $R_{-\theta} = \begin{bmatrix} cos\theta , sin\theta \ -sin\theta , cos\theta \end{bmatrix}$<br><strong>嗯？你回答我</strong>，是不是可以把 $-\theta$ 进去！<br>那是不是也可以看出来：$R_{-\theta} = \begin{bmatrix} cos\theta , sin\theta \ -sin\theta , cos\theta \end{bmatrix} = R_{\theta}^T$<br>一个矩阵的逆等于这个矩阵的转置矩阵，那这是什么？<br><strong>正交矩阵</strong>啦！</p><h1 id="小小深入一下三维变换">小小深入一下三维变换</h1><p>其实都跟二维差不多</p><h2 id="缩放变换（Scaling）和平移变换（Translation）">缩放变换（Scaling）和平移变换（Translation）</h2><p>不多说，自己看</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6g4r91tfau0rDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h2 id="旋转变换（Rotation）">旋转变换（Rotation）</h2><h3 id="简单旋转">简单旋转</h3><p>三维的旋转三个轴，先看图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fcgr1gldudbv1DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>观察发现，绕X轴旋转 $R_x(\alpha)$ ,绕Y轴旋转 $R_y(\alpha)$ ,绕Z轴旋转 $R_z(\alpha)$ ,在各自的旋转矩阵中，都是不动的<br>比如绕X轴旋转 $R_x(\alpha)$，第一行第一列是1，其余是0；<br>绕Y轴旋转 $R_y(\alpha)$，第二行第二列是1，其余是0；<br>同理，绕Z轴旋转 $R_z(\alpha)$，第三行第三列是1，其余是0.<br>但是我们又仔细看，发现Y轴旋转有些不一样，他的-sin $\alpha$ 跑到左下角了，这是为什么捏？<br>首先回忆之前的三维坐标系的定义，<br>$\overrightarrow{x} \times \overrightarrow{y} = \overrightarrow{z}$<br>$\overrightarrow{y} \times \overrightarrow{z} = \overrightarrow{x}$<br>$\overrightarrow{z} \times \overrightarrow{x} = \overrightarrow{y}$<br>这里就是<strong>循环对称</strong>的性质（注意：是叉乘哦）<br>什么？还不懂？自己拿上面的定义公式和右手定则自己去玩一下就知道了</p><h3 id="复杂旋转">复杂旋转</h3><p>更多时候，我们不只旋转了一次，不只绕一个轴旋转，那么一样，拆解变换<br>例如飞机，有三个轴可以旋转，如图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7ag13gdvmsbxDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>那么在图形学中，有专门的旋转拆解公式</p><h4 id="罗德里格斯旋转公式">罗德里格斯旋转公式</h4><p>针对在三维空间中的任意旋转轴的变换，需要用到罗德里格斯旋转公式。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6i3aeovaf057DIYPAdexAqevAGx1Aqav.png" style="height:250px;"/></div></div><p>上图部分解释：<strong>I</strong>是单位矩阵，<strong>n</strong>表示旋转轴向量<br>好，看起来好复杂，看不懂思密达。那么我们就来推导一下吧<br>假设 $\overrightarrow{a}$ 是旋转轴，要把 $\overrightarrow{s}$ 绕a旋转 $\alpha$ （<strong>a</strong>与<strong>s</strong>不一定垂直），操作如下：</p><ol><li>$\overrightarrow{s}$ 的分解：分解为垂直<strong>a</strong>的向量和平行与<strong>a</strong>的向量（$\overrightarrow{s}_{//}$）</li><li>向量矩阵化处理：得到的 $\overrightarrow{s}_{//} = \overrightarrow{a}(\overrightarrow{s}·\overrightarrow{a})$ 矩阵化变成 <strong>a</strong>$a^T\overrightarrow{s}$</li><li>垂直分解向量旋转：将分解的垂直向量就可以按照向量的点乘与叉乘在垂直于旋转轴的方向进行旋转。</li><li>垂直旋转向量与平行分解向量再次合并，完成旋转<br>没关系，还有视频讲解(up不是我,点图片跳转)：<br><a href="https://www.bilibili.com/video/BV1qV411X79j/?spm_id_from=333.337.search-card.all.click&amp;vd_source=2b118ffb78d23cd1f39b5b62a97714c2"><img src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6i3c9fvah4jvDIYPAdexAqevAGx1Aqav.png" alt="查看讲解"></a></li></ol><h1 id="Viewing-transformation">Viewing transformation</h1><h2 id="视图-相机变换（View-Camera-Transformation）">视图/相机变换（View/Camera Transformation）</h2><h3 id="定义相机（Define-the-camera）">定义相机（Define the camera）</h3><h4 id="初始定义">初始定义</h4><ul><li>位置Position $\overrightarrow{e}$</li><li>镜头朝向Look-at/gaze-direction $\overrightarrow{g}$</li><li>向上方向 Up direction $\overrightarrow{t}$</li></ul><h4 id="相机变换">相机变换</h4><p>我们都知道相对运动吧，相机动物体不动和物体动相机不动可以展现出相同的画面。<br>在图形学，我们经常定义相机位置在原点，而且朝向-z轴，初始向上方向为+y轴，可以让操作简化，有很多好处，也有坏处，后面再说</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7bywryfd7ec2DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p><strong>那么我们如何将一个相机放到原点并旋转至我们想要的位置呢？</strong><br>利用之前所学，我们知道整个操作 $M_{view} = R_{view}T_{view}$ ，先平移再旋转<br>假设相机在e点，朝向为 $\overrightarrow{g}$，向上方向为 $\overrightarrow{t}$<br>那么我们需要的操作是：</p><ol><li>从e点平移回原点,这个很简单<br>$$<br>T_{view} =<br>\begin{bmatrix}<br>0 , 0 , 0 , -x_e \<br>0 , 0 , 0 , -y_e \<br>0 , 0 , 0 , -z_e \<br>0 , 0 , 0 ,  1<br>\end{bmatrix}<br>$$</li><li>将朝向 $\overrightarrow{g}$ 变为-z（g to -z），将向上方向 $\overrightarrow{t}$ 变为y（t to y），（g x t）变为x<br>但是问题来了，将一个向量变成标准的100，010，001这种xyz的向量的时候，是比较麻烦的。那么我们就逆向变换，将xyz这类标准的向量转到我们相机各对应的向量上。<br>那就是用到逆矩阵，我们本来的旋转是 $M_{view}$，那逆矩阵就是 $M_{view}^{-1}$,[ x to (g x t) , y to t , z to -g ]<br>$$<br>M_{view}^{-1} =<br>\begin{bmatrix}<br>x_{g \times t} , x_t , x_{-g} , 0 \<br>y_{g \times t} , y_t , x_{-g} , 0 \<br>z_{g \times t} , z_t , x_{-g} , 0 \<br>0 , 0 , 0 ,  1<br>\end{bmatrix}<br>$$<br>我们之前也学了，旋转矩阵其实是正交矩阵，那么它的逆矩阵就等于他的转置矩阵，所以我们只需要把上面的逆矩阵转置一下，就直接可以得到我们想要的旋转矩阵！<br>$$<br>M_{view}^T = R_{view} =<br>\begin{bmatrix}<br>x_{g \times t} , y_{g \times t} , z_{g \times t} , 0 \<br>x_t , y_t , z_t , 0 \<br>x_{-g} , y_{-g} , x_{-g} , 0 \<br>0 , 0 , 0 ,  1<br>\end{bmatrix}<br>$$</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6i3kffvaq6liDIYPAdexAqevAGx1Aqav.png" style="height:450px;"/></div></div><h2 id="投影变换（Projection-transformation）（难点）"><em>投影变换（Projection transformation）（难点）</em></h2><h3 id="总概">总概</h3><p>投影方式分为两种：</p><ul><li><strong>正交投影（Orthographic projection）</strong></li><li><strong>透视投影（Perspective projecttion）</strong></li></ul><h4 id="正交与透视二者区别">正交与透视二者区别</h4><p><strong>视觉效果</strong>：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7byykgfdb2xmDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>正交并不会带来一种现象：近大远小，更多出现在工程制图。人眼更接近的是右侧的透视投影，会有这个现象。<br>（当然，如果你跟我一样学过素描，那就很好理解了）<br><strong>图形学里的数学做法</strong>：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6fxvdht89ggtDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>左侧的透视投影，我们认为相机在空间的某一点，由此在空间方向上延伸出一个四棱锥，把从一个深度区域到另一个深度的这一块区域里的东西显示出来，在四棱锥近处的一个平面屏幕上得到所照的图像。<br>右侧的正交投影，我们可以认为把相机放在无限远的地方，近处平面与远处平面就几乎完全相同。</p><h3 id="正交投影（Orthographic-projection）">正交投影（Orthographic projection）</h3><h4 id="A-simple-way">A simple way*</h4><ul><li>首先，正常相机放在原点，朝向-z方向，向上方向为y方向。</li><li>丢去z轴，这样所有东西都直接得到在成像平面上的样子</li><li>在移动到 $[-1,1]^2$ 的矩形上</li></ul><h4 id="图形学正式的做法">图形学正式的做法</h4><ul><li>定义立方体：[ l , r ] x [ b , t ] x [ f , n ]</li><li>移动立方体</li><li>缩放变成正则立方体 $[-1,1]^3$（就是立方体在三个轴的坐标都是[-1，1]上，也就是边长为2）<br>对于上面的定义立方体，其实就是（left，right）（x），（bottom，top）（y），far，near（z）。<br>但是我们发现是[ <strong>f</strong> , <strong>n</strong> ],far远处坐标比近处near要小，这是定义过程。<br>我们认定是右手系，也就是x x y = z。<br>也有别的，比如在OpenGl里面默认采用的左手系，那么<strong>f</strong>和<strong>n</strong>就是反着的。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0n000d7w32y570phnasovg5DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p><strong>具体的矩阵运算操作</strong>：<br>先平移：<br>$$<br>T_{ortho} =<br>\begin{bmatrix}<br>1 , 0 , 0 , -\frac{r + l}{2} \<br>0 , 1 , 0 , -\frac{t + b}{2} \<br>0 , 0 , 1 , -\frac{n + f}{2} \<br>0 , 0 , 0 , 1<br>\end{bmatrix}<br>$$<br>后缩放<br>$$<br>S_{ortho} =<br>\begin{bmatrix}<br>\frac{2}{r-l} , 0 , 0 , 0 \<br>0 , \frac{2}{t-b} , 0 , 0 \<br>0 , 0 , \frac{2}{n-f} , 0 \<br>0 , 0 , 0 , 1<br>\end{bmatrix}<br>$$<br>最终结果：<br>$$<br>M_{ortho} =<br>S_{ortho} T_{ortho} =<br>\begin{bmatrix}<br>\frac{2}{r-l} , 0 , 0 , 0 \<br>0 , \frac{2}{t-b} , 0 , 0 \<br>0 , 0 , \frac{2}{n-f} , 0 \<br>0 , 0 , 0 , 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>1 , 0 , 0 , -\frac{r + l}{2} \<br>0 , 1 , 0 , -\frac{t + b}{2} \<br>0 , 0 , 1 , -\frac{n + f}{2} \<br>0 , 0 , 0 , 1<br>\end{bmatrix}<br>$$</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7c26u1fjxnbvDIYPAdexAqevAGx1Aqav.png" style="height:450px;"/></div></div><h3 id="透视投影（Perspective-projecttion）">透视投影（Perspective projecttion）</h3><h4 id="小知识回顾">小知识回顾</h4><ul><li>在三维中，可以定义一个点是（x,y,z,1）,(kx,ky,kz,k!=0)，那么是不是也可表示为（zx,zy,$z^2$,z!=0）。他们都表示同一个点（x，y，z）</li></ul><h4 id="原理讲述">原理讲述</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzg2858b4eep0DIYPAdexAqevAGx1Aqav.png" style="height:450px;"/></div></div><p>看上面的图，<br>透视投影的过程：</p><ul><li>将透视投影转变到正交投影，也就是 $M_{persp-&gt;ortho}$</li><li>再正常做一次正交投影 $M_{ortho}$<br>图中，左侧是透视投影的样子，右侧则是正交投影的样子，那么如何从左侧变成右侧是一个重点。<br>我们只需要对着far（f）面进行挤压，将f面挤压至和n面相同时，就可以在n上做f的正交投影了<br>下面开始示例推导：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x7c2hvdfkdyz5DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>从侧面开始看，那么我们所需观测的就是（x’，y’，z’）到（x，y，z）这一区间，问题是将（x，y，z）挤压。<br>先从显而易见的下手，可以得出 $y’ = \frac{n}{z}y$<br>那么就可以类似的推导出 $x’ = \frac{n}{z}x$</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fcpha49fvp4h2DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>其实通过以上推导就可以得出 $M_{persp-&gt;ortho}$ 这个矩阵的一个大致内容</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0m000d7w32xoy1ok3v6trmoDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/></div></div><p>现在的问题是得出第三行的内容。这个时候我们需要观察<br>注意到（注意力惊人（bushi））：</p><ul><li>near面上的点没用动</li><li>far面上的点的z没有动<br>然后是根据我们上面的知识小回顾可以知道的：<br>将z用n去替换<br>$$<br>\begin{pmatrix}<br>nx \<br>ny \<br>unknow \<br>z<br>\end{pmatrix} --&gt;<br>\begin{pmatrix}<br>x \<br>y \<br>n \<br>1<br>\end{pmatrix} =<br>\begin{pmatrix}<br>nx \<br>ny \<br>n^2 \<br>n<br>\end{pmatrix}<br>$$<br>那么其实可以知道矩阵第三行其实就是（0，0，A，B）的一种形式<br>$$<br>(0 0 A B)<br>\begin{pmatrix}<br>x \<br>y \<br>n \<br>1<br>\end{pmatrix} =<br>n^2<br>$$<br>再根据上面注意到的内容，就可以得出：<br>An + B = $n^2$<br>Af + B = $f^2$<br>解方程==&gt;<br>A = n + f<br>B = -nf<br>最后可以得到投影变换到正交的变换 $M_{persp-&gt;ortho}$<br>$$<br>M_{persp-&gt;ortho} =<br>\begin{bmatrix}<br>n , 0 , 0 , 0 \<br>0 , n , 0 , 0 \<br>0 , 0 , n+f , -nf \<br>0 , 0 , 1 , 0<br>\end{bmatrix}<br>$$<br>然后最终的投影变换 $M_{persp} = M_{ortho} M_{persp-&gt;ortho}$<br>$$<br>M_{persp} =<br>M_{ortho} M_{persp-&gt;ortho} =<br>\begin{bmatrix}<br>\frac{2}{r-l} , 0 , 0 , -\frac{r + l}{2} \<br>0 , \frac{2}{t-b} , 0 , -\frac{t + b}{2} \<br>0 , 0 , \frac{2}{n-f} , -\frac{n + f}{2} \<br>0 , 0 , 0 , 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>n , 0 , 0 , 0 \<br>0 , n , 0 , 0 \<br>0 , 0 , n+f , -nf \<br>0 , 0 , 1 , 0<br>\end{bmatrix}<br>$$<br>结束！</li></ul><h1 id="变换到此暂时结束的寄语">变换到此暂时结束的寄语</h1><p>整体难度还行，认真推导的话会发现很简单，这也只是皮毛，后面还会深入<br>成为计算机图形大师！</p><p class='p center logo huge'>ArisuMika</p><p class='p center small cyan'>关注Arisu喵！关注Arisu谢谢喵！</p><div class="tag link"><a class="link-card" title="ArisuMikaのB站" href="https://space.bilibili.com/355273977"><div class="left"><img src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaeu4l5tf9wwDIYPAdexAqevAGx1Aqav.JPG"/></div><div class="right"><p class="text">ArisuMikaのB站</p><p class="url">https://space.bilibili.com/355273977</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;补充知识&quot;&gt;补充知识&lt;/h1&gt;
&lt;p&gt;众所周知（）： $R_{&#92;theta} = &#92;begin{bmatrix} cos&#92;theta , -sin&#92;theta &#92; sin&#92;theta , cos&#92;theta &#92;end{bmatrix}$&lt;br&gt;
那问题来了，那我问</summary>
      
    
    
    
    <category term="Arisuの巧克力" scheme="http://blog.arisumika.top/categories/Arisu%E3%81%AE%E5%B7%A7%E5%85%8B%E5%8A%9B/"/>
    
    
    <category term="线性代数" scheme="http://blog.arisumika.top/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="计算机图形" scheme="http://blog.arisumika.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>线性代数：矩阵变换</title>
    <link href="http://blog.arisumika.top/posts/4.html"/>
    <id>http://blog.arisumika.top/posts/4.html</id>
    <published>2025-03-29T08:45:00.000Z</published>
    <updated>2025-04-01T07:42:20.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二维矩阵变换">二维矩阵变换</h1><h2 id="缩放变换（Scaling）">缩放变换（Scaling）</h2><h3 id="均匀缩放">均匀缩放</h3><p>将矩阵进行缩放，例如将一个矩阵大小均匀缩放变成原来的一半<br>那么，我们记这个过程为 $S_{0.5}$ 可以写作：<br>$$<br>\begin{bmatrix}<br>x’ \<br>y’<br>\end{bmatrix} =<br>\begin{bmatrix}<br>s ,0\<br>0 ,s<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y<br>\end{bmatrix}<br>$$</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzd522l8f7zx9DIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h3 id="不均匀缩放">不均匀缩放</h3><p>现在缩放不均匀，比如x缩放0.5.y不缩放，也就是y不变，x变为0.5非均匀缩放<br>其实也一样，我们记这个过程为 $S_{0.5，1.0}$ 可以写作：<br>$$<br>\begin{bmatrix}<br>x’ \<br>y’<br>\end{bmatrix} =<br>\begin{bmatrix}<br>s_x ,0\<br>0 , s_y<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y<br>\end{bmatrix}<br>$$</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x79rzpecyimbnDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><p>很简单，没什么好说的</p><h2 id="反射变换（Reflection）">反射变换（Reflection）</h2><p>关于某条直线的镜像。</p><ol><li>关于 x 轴反射：$\begin{bmatrix} 1 &amp; 0 \ 0 &amp; -1 \end{bmatrix}$<br>关于 y=x 反射：$\begin{bmatrix} 0 &amp; 1 \ 1 &amp; 0 \end{bmatrix}$<br>变换也可也写作：<br>$$<br>\begin{bmatrix}<br>x’ \<br>y’<br>\end{bmatrix} =<br>\begin{bmatrix}<br>-1(0) ,0(1)\<br>0(-1) , 1(0)<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y<br>\end{bmatrix}<br>$$</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzd52yl8f8eo5DIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h2 id="剪切变换（Shear）">剪切变换（Shear）</h2><p>简而言之就是沿某方向拉伸。<br>按照下图所示，上边的每个点向右移动a个单位，竖直(y)不动,下边不动，那就是水平方向的一个切变<br>$$<br>\begin{bmatrix}<br>x’ \<br>y’<br>\end{bmatrix} =<br>\begin{bmatrix}<br>1 ,a\<br>0 , 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y<br>\end{bmatrix}<br>$$<br>要找关系，找变化前x，y和变化后x’，y’两者之间关系</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0n000d7w32y55dgku87ar6jDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h2 id="旋转变换（Rotation）">旋转变换（Rotation）</h2><p>默认规定：</p><ol><li>不说明下，说旋转默认绕原点旋转</li><li>不说明下，说旋转默认绕逆时针旋转<br>例如：将矩阵旋转 $\theta$，则矩阵绕原点逆时针旋转 $\theta$，这个过程可以记作<br>$$<br>R_{\theta} =<br>\begin{bmatrix}<br>cos\theta ,-sin\theta\<br>sin\theta , cos\theta<br>\end{bmatrix}<br>$$<br>$$<br>\begin{bmatrix}<br>x’ \<br>y’<br>\end{bmatrix} =<br>\begin{bmatrix}<br>cos\theta ,-sin\theta\<br>sin\theta , cos\theta<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y<br>\end{bmatrix}<br>$$</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x79s05jcyjmzfDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h1 id="齐次坐标与平移变换">齐次坐标与平移变换</h1><h2 id="平移变换（Translation）">平移变换（Translation）</h2><p>引入齐次坐标（Homogeneous Coordinates），将平移表示为线性运算<br>例如：假设将矩阵沿x轴平移 $t_x$ ,沿y轴平移 $t_y$<br>如果不使用齐次坐标，采用上面的二维形式，只能写成<br>$$<br>\begin{bmatrix}<br>x’ \<br>y’<br>\end{bmatrix} =<br>\begin{bmatrix}<br>a , b\<br>c , d<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y<br>\end{bmatrix} +<br>\begin{bmatrix}<br>t_x \<br>t_y<br>\end{bmatrix}<br>(若单纯平移，则矩阵abcd为单位矩阵)<br>$$<br>不能表示为线性变换，为了统一简单的方法，避免平移变换当作特殊去处理<br>这时候需要进行<strong>降维打击！</strong>（bushi），给二维坐标新添加一个维度！<br>将二维点（Point）表示为 $(x,y,1)^T$ 二维向量（Vector）表示为 $(x,y,0)^T$<br>就可以看到如下图：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6e3uisssv2yiDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><p>就可以将平移表示为线性运算<br>以下是为什么定义点为1向量为0：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0m000d7w32xow86oiskxuy8DIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><p>最底下公式可以得知，点+点之后的结果由齐次坐标表示的是点与点间的中点<br>很好理解，两个点相加得到的w=2,转换成2D点除掉w后就是对应坐标相加/2了，就是中点<br>齐次坐标表示变换：<br>$$<br>\begin{pmatrix}<br>x’ \<br>y’ \<br>1<br>\end{pmatrix} =<br>\begin{pmatrix}<br>a , b , t_X \<br>c , d , t_y \<br>0 , 0 , 1<br>\end{pmatrix}<br>\begin{pmatrix}<br>x \<br>y \<br>1<br>\end{pmatrix}<br>$$<br>观察会发现矩阵最后一行都是001，平移写在最后一列的前两行上。其余二维线性变换写在左上角的2*2上</p><h2 id="用齐次坐标表示线性变换">用齐次坐标表示线性变换</h2><p>最后可以得出以下</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fcfukfkd6idlcDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h1 id="逆变换">逆变换</h1><p>很简单，就是变回去（</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzd54sk8fa5lpDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h1 id="复合变换">复合变换</h1><h2 id="复合变换的初步细节">复合变换的初步细节</h2><p>多个变换可通过矩阵乘法组合，但<strong>顺序不可交换</strong>。例如，先旋转后平移 ≠ 先平移后旋转。<br>例如以下变换：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0m000d7w32xowdvhpswdntcDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><p><strong>思考：如何从左变换到右侧状态</strong><br>是先平移再旋转？还是先旋转再平移？<br>先思考，思考完毕之后再看答案<br><strong>答案：</strong><br><span class="heimu" title="你知道的太多了"> 先旋转再平移<br>我们上面说了:<br>1. 先旋转后平移 ≠ 先平移后旋转<br>2. 不说明下，说旋转默认绕原点旋转</span><br>所以会有两种情况：</p><ol><li>先平移再旋转 $R_{45} · T_{(1,0)}$</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6fu3p6t4ksoxDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><ol start="2"><li>先旋转再平移 $T_{(1,0)} · R_{45}$</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzdgc8j8qypwjDIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h2 id="矩阵复合变换的小公式">矩阵复合变换的小公式</h2><p><strong>先旋转再平移：</strong><br>$$<br>T_{(1,0)} · R_{45} ·<br>\begin{bmatrix}<br>x \<br>y \<br>1<br>\end{bmatrix} =<br>\begin{bmatrix}<br>1 , 0 , 1 \<br>0 , 1 , 0 \<br>0 , 0 , 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>cos\theta , -sin\theta , 0 \<br>sin\theta , cos\theta , 0 \<br>0 , 0 , 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y \<br>1<br>\end{bmatrix}<br>$$<br>在式子左侧，会发现越先操作的变换越靠近 $\begin{bmatrix} x \ y  \ 1 \end{bmatrix}$ ，从右到左去一个一个应用变换</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6fu4i9t4ls95DIYPAdexAqevAGx1Aqav.png" style="height:300px;"/></div></div><h3 id="推广">推广</h3><p>我们可以先把前面的变换都乘到一块吗，都变成一个矩阵再去乘我们原始的向量</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzdgd5t8qzijnDIYPAdexAqevAGx1Aqav.png" style="height:350px;"/></div></div><h1 id="变换分解">变换分解</h1><p>先看图：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6fu5e8t4mnymDIYPAdexAqevAGx1Aqav.png" style="height:350px;"/></div></div><p>我们要实现矩阵绕着点C进行旋转，而非受限与原点旋转。<br>很简单，先把矩阵平移会到原点上去，再旋转，再平移回去，这样就把绕C旋转这个变换分解成了三个基础变换<br>$T© · R(a) · T(-c)$</p><h1 id="浅谈三维变换">浅谈三维变换</h1><h2 id="基础部分">基础部分</h2><p>三维也有基础变换！<br>为了保证线性运算，使用齐次坐标，依旧要<strong>降维打击</strong><br>三维点齐次坐标 ：$(x,y,z,1)^T$ ; 三维向量齐次坐标 ：$(x,y,z,0)^T$<br>同二维一样</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0n000d7w32y55jgcq8iruphDIYPAdexAqevAGx1Aqav.png" style="height:350px;"/></div></div><h2 id="齐次坐标表示变换">齐次坐标表示变换</h2><p>一样的啦！</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x79y0u4da0hlmDIYPAdexAqevAGx1Aqav.png" style="height:350px;"/></div></div><p>左上角3*3的区域就是三维变换的基础线性变换，右侧最后一列的 $t_x , t_y , t_z$ 表示的是平移，最后一列还是0001<br>$$<br>\begin{bmatrix}<br>x’ \<br>y’ \<br>z’ \<br>1<br>\end{bmatrix} =<br>\begin{bmatrix}<br>a , b , c , t_x \<br>d , e , f , t_y \<br>g , h , i , t_z \<br>0 , 0 , 0 , 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>x \<br>y \<br>z \<br>1<br>\end{bmatrix}<br>$$</p><p class='p center logo huge'>ArisuMika</p><p class='p center small cyan'>关注Arisu喵！关注Arisu谢谢喵！</p><div class="tag link"><a class="link-card" title="ArisuMikaのB站" href="https://space.bilibili.com/355273977"><div class="left"><img src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaeu4l5tf9wwDIYPAdexAqevAGx1Aqav.JPG"/></div><div class="right"><p class="text">ArisuMikaのB站</p><p class="url">https://space.bilibili.com/355273977</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二维矩阵变换&quot;&gt;二维矩阵变换&lt;/h1&gt;
&lt;h2 id=&quot;缩放变换（Scaling）&quot;&gt;缩放变换（Scaling）&lt;/h2&gt;
&lt;h3 id=&quot;均匀缩放&quot;&gt;均匀缩放&lt;/h3&gt;
&lt;p&gt;将矩阵进行缩放，例如将一个矩阵大小均匀缩放变成原来的一半&lt;br&gt;
那么，我们记这个过程</summary>
      
    
    
    
    <category term="Arisuの巧克力" scheme="http://blog.arisumika.top/categories/Arisu%E3%81%AE%E5%B7%A7%E5%85%8B%E5%8A%9B/"/>
    
    
    <category term="线性代数" scheme="http://blog.arisumika.top/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="计算机图形" scheme="http://blog.arisumika.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>线性代数：向量与基础矩阵</title>
    <link href="http://blog.arisumika.top/posts/3.html"/>
    <id>http://blog.arisumika.top/posts/3.html</id>
    <published>2025-03-26T15:21:00.000Z</published>
    <updated>2025-03-31T17:08:15.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向量">向量</h1><h2 id="向量加法">向量加法</h2><p>不多说，直接加就是了<br>平行四边形法则或者三角形法则</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzcxh0k873jgrDIYPAdexAqevAGx1Aqav.png" style="width:500px;"/></div></div><h2 id="向量点乘">向量点乘</h2><p>也没什么好说的，高中数学</p><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x79o760cr228lDIYPAdexAqevAGx1Aqav.png" style="height:280px;"/><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/ymjew503t0n000d7w32y559yns804rkjDIYPAdexAqevAGx1Aqav.png" style="height:280px;"/><p><strong>有什么用</strong><br>可以通过向量点乘来判断向量间的夹角，两向量的方向关系<img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6e12hispghp0DIYPAdexAqevAGx1Aqav.png" style="height:280px;"/></p><h2 id="向量叉乘">向量叉乘*</h2><p>叉乘和点乘是完全不一样的计算，向量叉乘仅在三维空间中有定义。对于两个向量a = ($a_1, a_2, a_3$)和b=($b_1, b_2, b_3$)，它们的叉乘 $\mathbf{a} \times \mathbf{b}$ 的结果垂直于 $\mathbf{a}$ 和 $\mathbf{b}$。</p><h3 id="1-几何意义">1.几何意义</h3><p>垂直性：叉乘的结果向量垂直于原向量，并且其方向由右手（螺旋）法则（四指从前乘绕向后乘，大拇指方向即为所得叉乘向量方向）决定。<br>模长：叉乘的模长等于两个向量所构成的平行四边形的面积，即：<br>$|\mathbf{a} \times \mathbf{b}| = |\mathbf{a}||\mathbf{b}| \sin\theta$<br>其中 $\theta$ 是两向量之间的夹角。</p><h3 id="2-运算性质">2.运算性质</h3><p>反交换律：$\mathbf{a} \times \mathbf{b} = -(\mathbf{b} \times \mathbf{a})$<br>分配律：$\mathbf{a} \times (\mathbf{b} + \mathbf{c}) = \mathbf{a} \times \mathbf{b} + \mathbf{a}$ $\times \mathbf{c}$<br>与标量乘法结合：$k(\mathbf{a} \times \mathbf{b}) = (k\mathbf{a}) \times \mathbf{b} = \mathbf{a} \times (k\mathbf{b})$</p><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzd1zi18bt3srDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><h3 id="3-利用叉乘可以构建三维坐标系">3.利用叉乘可以构建三维坐标系</h3><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/ymjew503t0l000d7w32x79qfdpcvebv0DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><h3 id="4-在图形学应用：判断向量方位-判断点与面与向量位置">4.在图形学应用：判断向量方位/判断点与面与向量位置</h3><p><strong>问题参考下图：</strong></p><ol><li>向量方位（看左图）：<br>如果 $\mathbf{a} \times \mathbf{b} = c$ 所得的c是正的，那么可以判断<strong>b</strong>在<strong>a</strong>的左侧<br>如果反过来，$\mathbf{b} \times \mathbf{a} = c$ 所得的c是负的，那么可以判断<strong>a</strong>在<strong>b</strong>的右侧<br><strong>（可以自己用右手法则验证一下）</strong></li><li>点与面的位置（看右图）：<br>$\overrightarrow{AP} \times \overrightarrow{AB}$ 和 $\overrightarrow{BP} \times \overrightarrow{BC}$ 和 $\overrightarrow{CP} \times \overrightarrow{CA}$ 所得的结果都是同侧，那么可以判断P点在 $\Delta ABC$ 中<br>如果其中任何一个值表示另一侧，则P不在 $\Delta ABC$ 中</li></ol><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fcfrlc3d33jsnDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><h4 id="以上知识在图形学中的重点">以上知识在图形学中的重点</h4><p><strong>例如做三角形的光栅化，要判断三角形覆盖了哪些像素点，要知道像素是否在三角形内部，对像素进行着色</strong></p><h1 id="矩阵（基础部分）">矩阵（基础部分）</h1><p>不多说，大一线代知识</p><h2 id="矩阵相乘">矩阵相乘</h2><h3 id="计算方法">计算方法</h3><p>如下图：<br>要算C第几行第几列就去找前面A第几行和B第几列</p><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzd21wc8bweigDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><h3 id="性质：">性质：</h3><p>如下图：</p><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fcfrmyyd35x5lDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><h2 id="矩阵与向量">矩阵与向量</h2><p>其实跟矩阵相乘差不多，只不过有一个矩阵变成了1*n的向量,不多说</p><h2 id="转置矩阵">转置矩阵</h2><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/yk6baz03t0l000d7w33fcfropqd37aw4DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><h2 id="单位矩阵与矩阵的逆">单位矩阵与矩阵的逆</h2><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/ymjew503t0m000d7w32xow6lzmshxntbDIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><h1 id="向量相乘表示为矩阵相乘">向量相乘表示为矩阵相乘</h1><img no-lazy class="inline" src="https://vip.123pan.cn/1814146125/ymjew503t0n000d7w32y55c03w84bjy1DIYPAdexAqevAGx1Aqav.png" style="height:400px;"/><p class='p center logo huge'>ArisuMika</p><p class='p center small cyan'>关注Arisu喵！关注Arisu谢谢喵！</p><div class="tag link"><a class="link-card" title="ArisuMikaのB站" href="https://space.bilibili.com/355273977"><div class="left"><img src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaeu4l5tf9wwDIYPAdexAqevAGx1Aqav.JPG"/></div><div class="right"><p class="text">ArisuMikaのB站</p><p class="url">https://space.bilibili.com/355273977</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;向量&quot;&gt;向量&lt;/h1&gt;
&lt;h2 id=&quot;向量加法&quot;&gt;向量加法&lt;/h2&gt;
&lt;p&gt;不多说，直接加就是了&lt;br&gt;
平行四边形法则或者三角形法则&lt;/p&gt;
&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; </summary>
      
    
    
    
    <category term="Arisuの巧克力" scheme="http://blog.arisumika.top/categories/Arisu%E3%81%AE%E5%B7%A7%E5%85%8B%E5%8A%9B/"/>
    
    
    <category term="线性代数" scheme="http://blog.arisumika.top/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="计算机图形" scheme="http://blog.arisumika.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>Windows下VScode配置Eigen</title>
    <link href="http://blog.arisumika.top/posts/2.html"/>
    <id>http://blog.arisumika.top/posts/2.html</id>
    <published>2025-03-25T02:39:52.411Z</published>
    <updated>2025-03-27T12:20:34.254Z</updated>
    
    <content type="html"><![CDATA[<div class="tip info"><p>Eigen是一个高层次的C ++库，有效支持线性代数，矩阵和矢量运算，数值分析及其相关的算法。Eigen是一个开源库，从3.1.1版本开始遵从MPL2许可。</p></div><h1 id="缘由">缘由</h1><p>最近在学计算机图形，所以要用到线性代数相关的算法，就自己装了个Eigen，其实用Linux装会简单一些，但是本人懒得搞虚拟机或者双系统了，索性直接在windows装，搞了有些时间，避免后来者碰壁，就自己写一篇教程吧</p><h1 id="开始">开始</h1><div class="tip warning faa-horizontal animated faa-fast"><p class='p '>如果之前没有在Vscode配置过C/C++，请先自行配置</p></div><ol><li>在<a href="https://eigen.tuxfamily.org/index.php?title=Main_Page">官网</a>下载Eigen3.4.0</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaeuz95tgnlcDIYPAdexAqevAGx1Aqav.png" style="width:800px;"/></div></div><ol start="2"><li><p>解压到你自己想放的地方，我个人推荐和Mingw32放在一起（别放到子类文件夹去了）</p></li><li><p>打开VScode在c_cpp_properties.json中设置包含头文件的路径<br>在”includePath”中加入Eigen的文件路径（注意上一行加逗号）</p></li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6bgtbnq7357vDIYPAdexAqevAGx1Aqav.png" style="width:800px;"/></div></div><p>注意斜杠，要跟图片内一致，不是反斜杠哦</p><ol start="4"><li>在tasks.json中，修改如下：<br>同样需要注意上一行后面加逗号。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;-I&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;C:\\...\\eigen-3.4.0\\Eigen&quot;</span> #就是你自己的路径</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaevtu5tholmDIYPAdexAqevAGx1Aqav.png" style="width:800px;"/></div></div><ol start="5"><li>一般来说这个时候已经配置好了，可以使用一段代码来测试是否配置成功。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MatrixXd m = MatrixXd::<span class="built_in">Random</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    m = (m + MatrixXd::<span class="built_in">Constant</span>(<span class="number">2</span>,<span class="number">2</span>, <span class="number">1</span>)) * <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m =&quot;</span> &lt;&lt; endl</span><br><span class="line">         &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    <span class="function">VectorXd <span class="title">v</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    v &lt;&lt; <span class="number">1</span>, <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m * v =&quot;</span> &lt;&lt; endl</span><br><span class="line">         &lt;&lt; m * v &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p red'>但是有些人可能会有问题，点击右上角运行会报错找不到头文件</p><div class="tip warning"><p>这是因为右上角的运行是你安装了Code Runner插件，而你的Code Runner还没有配置Eigen</p></div><ol start="6"><li>给Code Runner配置Eigen<br>打开Code Runner的设置</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/ymjew503t0n000d7w32y540xgr5mvkinDIYPAdexAqevAGx1Aqav.png" style="width:800px;"/></div></div><p>找到CPP这一栏</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://vip.123pan.cn/1814146125/yk6baz03t0m000d7w33g6bgu8tq74gzgDIYPAdexAqevAGx1Aqav.png" style="width:800px;"/></div></div><p>在g++后面加上如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-I \<span class="string">&quot;C:\\...\\eigen-3.4.0\&quot; #你自己的路径</span></span><br></pre></td></tr></table></figure><div class="tip success"><p>然后再用右上角那个按钮运行代码就不会报错了！！！恭喜你完成了Eigen的配置!</p></div><p class='p center logo huge'>ArisuMika</p><p class='p center small cyan'>关注Arisu喵！关注Arisu谢谢喵！</p><div class="tag link"><a class="link-card" title="ArisuMikaのB站" href="https://space.bilibili.com/355273977"><div class="left"><img src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaeu4l5tf9wwDIYPAdexAqevAGx1Aqav.JPG"/></div><div class="right"><p class="text">ArisuMikaのB站</p><p class="url">https://space.bilibili.com/355273977</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;Eigen是一个高层次的C ++库，有效支持线性代数，矩阵和矢量运算，数值分析及其相关的算法。Eigen是一个开源库，从3.1.1版本开始遵从MPL2许可。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;缘由&quot;&gt;缘由&lt;/h1&gt;
&lt;p&gt;最近</summary>
      
    
    
    
    <category term="Arisuの小蛋糕" scheme="http://blog.arisumika.top/categories/Arisu%E3%81%AE%E5%B0%8F%E8%9B%8B%E7%B3%95/"/>
    
    
    <category term="VScode" scheme="http://blog.arisumika.top/tags/VScode/"/>
    
    <category term="C++" scheme="http://blog.arisumika.top/tags/C/"/>
    
    <category term="线性代数" scheme="http://blog.arisumika.top/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="计算机图形" scheme="http://blog.arisumika.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>个人Blog正式上线</title>
    <link href="http://blog.arisumika.top/posts/1.html"/>
    <id>http://blog.arisumika.top/posts/1.html</id>
    <published>2025-03-22T14:55:54.050Z</published>
    <updated>2025-03-29T13:17:06.073Z</updated>
    
    <content type="html"><![CDATA[<p class='p logo h1 green'>个人Blog基本99%完成上线！</p><div class="tip info"><p>本Blog主要展示个人技术栈和日常有趣的事情以及部分教学内容</p></div><h1 id="目前功能">目前功能</h1><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>文章发布</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>音乐播放器</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>自定义css</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>最新文档显示</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>多样个性化标签外挂</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>留言板</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>友链</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>smooth丝滑动画</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>标签分类与归档</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>模块窗口划分</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>评论系统</p>            </div><h1 id="未来新增功能">未来新增功能</h1><div class="timeline pink"><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>开发历程</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-03-15</p></div>        </div>        <div class='timeline-item-content'><p>突然想起来自己之前搭的个人网站挂掉了，服务器也要过期了，域名也是。<br>于是计划搭建此站<br><span class="heimu" title="你知道的太多了"> 才不会告诉你是因为本人疏忽管理维护导致的（</span></p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-03-24</p></div>        </div>        <div class='timeline-item-content'><p>本站正式上线v0.5版本！<br>迫于时间和使用，<span class="heimu" title="你知道的太多了"> 其实是本人太懒了（</span>本站功能并不完整，后续等待继续开发</p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-03-27</p></div>        </div>        <div class='timeline-item-content'><p>本站正式上线v1.0版本！<br>不断压榨时间下，赶出了大致全部功能！<br>欢迎随时光临！</p></div>      </div></div><p class='p center logo huge'>ArisuMika</p><p class='p center small cyan'>关注Arisu喵！关注Arisu谢谢喵！</p><div class="tag link"><a class="link-card" title="ArisuMikaのB站" href="https://space.bilibili.com/355273977"><div class="left"><img src="https://vip.123pan.cn/1814146125/yk6baz03t0n000d7w33gzaeu4l5tf9wwDIYPAdexAqevAGx1Aqav.JPG"/></div><div class="right"><p class="text">ArisuMikaのB站</p><p class="url">https://space.bilibili.com/355273977</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p logo h1 green&#39;&gt;个人Blog基本99%完成上线！&lt;/p&gt;
&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;本Blog主要展示个人技术栈和日常有趣的事情以及部分教学内容&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;目前功能&quot;&gt;目前功能&lt;/h1&gt;
&lt;</summary>
      
    
    
    
    <category term="Arisuの棉花糖" scheme="http://blog.arisumika.top/categories/Arisu%E3%81%AE%E6%A3%89%E8%8A%B1%E7%B3%96/"/>
    
    
    <category term="开发日志" scheme="http://blog.arisumika.top/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    
    <category term="Blog网站" scheme="http://blog.arisumika.top/tags/Blog%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
</feed>
